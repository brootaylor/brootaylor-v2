---
permalink: /serviceworker.js
eleventyExcludeFromCollections: true
---

/*
 * {{ pkg.name }}
 * v{{ pkg.version }}
 * {{ pkg.homepage }}
 * Copyright (c) {{ site.yearCurrent }} {{ pkg.author.name }}. Licensed {{ pkg.license }}

 I think it's important to say that this service worker isn't entirely my creation. I've modified bits of it but the vast majority of it exists because of legendary people like Jeremy Keith (https://adactio.com/serviceworker.js), Ethan Marcotte (https://ethanmarcotte.com/theworkerofservices.js) and Paul Robert Lloyd (https://paulrobertlloyd.com/serviceworker.js).

 Thank you for the wonderful work you all do.

 https://adactio.com/
 https://ethanmarcotte.com/
 https://paulrobertlloyd.com/

 */

const siteName = '{{ pkg.name }}';
const siteVersion = 'v{{ pkg.version }}';
const siteDeployTime = '{{ site.timeCurrent }}';
const cacheName = siteName + '_' + siteVersion + '.' + siteDeployTime;

const staticCacheName = 'static@' + cacheName;
const imageCacheName = 'images@' + cacheName;
const pagesCacheName = 'pages@' + cacheName;
const cacheList = [
	staticCacheName,
	imageCacheName,
	pagesCacheName
];
const offlinePage = '/offline';
const offlinePages = [
{%- set allPosts = collections.post | reverse -%}
{% for item in allPosts.slice(0, 5) %}
	'{{ item.url | pretty }}',
{%- endfor %}
{%- for item in navigation.mainnav %}
	{%- if item.external !== true %}
	'{{ item.url }}',
	{%- endif -%}
{%- endfor %}
{%- for item in navigation.footernav %}
	{%- if item.external !== true %}
	'{{ item.url }}',
	{%- endif -%}
{%- endfor %}
	'{{ site.start_url }}'
];

function updateStaticCache() {
	return caches.open(staticCacheName).then(staticCache => {
		// These files don't block installation
		staticCache.addAll([
			'./assets/images/common/logo.png'
		].concat(offlinePages));
		// These files must be cached for installation
		return staticCache.addAll([
			'./styles/main.css',
			offlinePage
		]);
	});
}

function deleteOldCaches() {
	return caches.keys().then(keys => {
		return Promise.all(keys
			.filter(key => !cacheList.includes(key))
			.map(key => caches.delete(key))
		);
	});
}

function trimCache(cacheName, maxItems) {
	caches.open(cacheName).then(cache => {
		cache.keys().then(keys => {
			if (keys.length > maxItems) {
				cache.delete(keys[0]).then(() => {
					trimCache(cacheName, maxItems)
				});
			}
		});
	});
}

addEventListener('install', event => {
	// Update static cache
	event.waitUntil(
		updateStaticCache().then(() => {
			self.skipWaiting();
		})
	);
});

addEventListener('activate', event => {
	// Delete old caches
	event.waitUntil(
		deleteOldCaches().then(() => {
			self.clients.claim();
		})
	);
});

addEventListener('message', event => {
	// Trim size of caches on page load
	if (event.data.command === 'trimCaches') {
		trimCache(pagesCacheName, 25);
		trimCache(imageCacheName, 50);
	}
});

addEventListener('fetch', event => {
	const {request} = event;
	const url = new URL(request.url);

	// Ignore non-GET requests
	if (request.method !== 'GET') {
		return;
	}

	// HTML page requests (defer to network)
	if (request.headers.get('Accept').includes('text/html')) {
		event.respondWith(
			fetch(request).then(fetchResponse => {
				// Online strategy
				// Add named offline pages to static cache
				// Add other pages to pages cache
				// Fetch page from network
				const copy = fetchResponse.clone();

				if (offlinePages.includes(url.pathname)) {
					try {
						event.waitUntil(
							caches.open(staticCacheName).then(staticCache => {
								staticCache.put(request, copy);
							})
						);
					} catch (error) {
						console.error(error);
					}
				} else {
					try {
						event.waitUntil(
							caches.open(pagesCacheName).then(pagesCache => {
								return pagesCache.put(request, copy);
							})
						);
					} catch (error) {
						console.error(error);
					}
				}
				return fetchResponse;
			}).catch(fetchError => {
				// Offline strategy
				console.error(fetchError);

				// If file is cached serve that, else show cached offline page
				return caches.match(request).then(cacheResponse => {
					return cacheResponse || caches.match(offlinePage);
				});
			})
		);
		return;
	}

	// Other file requests (defer to cache)
	event.respondWith(
		// If file is cached, serve that
		caches.match(request).then(cacheResponse => {
			return cacheResponse || fetch(request).then(fetchResponse => {
				// Online strategy
				// Add images to cache
				// Fetch file from network
				if (request.url.match(/\.(gif|jpe?g|png|svg|webp)/)) {
					const copy = fetchResponse.clone();
					try {
						event.waitUntil(
							caches.open(imageCacheName).then(imageCache => {
								imageCache.put(request, copy);
							})
						);
					} catch (error) {
						console.error(error);
					}
				}
				return fetchResponse;
			}).catch(fetchError => {
				console.error(fetchError);
			});
		})
	);
});
