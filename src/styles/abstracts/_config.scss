/**********************************************************
 * This file contains all application-wide Sass variables.
 **********************************************************/

/// Design Tokens.
///
/// 1. These "design token" values are generated dynamically from a concatenation of the `.json` files (in the root `tokens/` directory) into a Sass map [`tokens/_tokens.scss`].
/// 2. These Sass map values are then called in this [`config.scss`] file and declared as variables
/// @group Fonts
@use '../tokens/tokens' as *;



/// Base font family
$font-family-base: map-get($fonts, base) !default;

/// Title font family
$font-family-title: map-get($fonts, title) !default;

/// Secondary font family
$font-family-secondary: map-get($fonts, secondary) !default;

/// Code (monospace) font family
$font-family-code: map-get($fonts, code) !default;

/// Base font size
$font-size-base: map-get($size-scale, base) !default;

/// Base line height
$line-height-base: map-get($size-scale, line-height) !default;



/// Site width (Max)
$site-width: map-get($size-scale, site-width) !default;



/// Copy text color
$font-colour-base: map-get($colors, slate) !default;

/// Main brand color
$brand-color-primary: map-get($colors, primary) !default;

/// Secondary brand color
$brand-color-secondary: map-get($colors, secondary) !default;

/// Tertiary brand color
$brand-color-tertiary: map-get($colors, tertiary) !default;

/// White
$white: #ffffff !default;

/// Light grey
$grey-light: map-get($colors, light) !default;

/// Medium grey
$grey-mid: map-get($colors, mid) !default;

/// Dark grey
$grey-dark: map-get($colors, dark) !default;

/// Black
$black: #000000 !default;

/// Orange custom
$orange-custom: map-get($colors, orange-custom) !default;

/// Green custom
$green-custom: map-get($colors, green-custom) !default;

/// Green custom light
$green-custom-light: map-get($colors, green-custom-light) !default;

/// Green custom dark
$green-custom-dark: map-get($colors, green-custom-dark) !default;



/// Media query x-small (viewport) width
$breakpoint-x-small: map-get($breakpoints, x-small) !default;

/// Media query small (viewport) width
$breakpoint-small: map-get($breakpoints, small) !default;

/// Media query medium (viewport) width
$breakpoint-medium: map-get($breakpoints, medium) !default;

/// Media query large (viewport) width
$breakpoint-large: map-get($breakpoints, large) !default;

/// Media query x-large (viewport) width
$breakpoint-x-large: map-get($breakpoints, x-large) !default;



/// Relative or absolute URL where all assets are served from
/// $base-url: 'http://cdn.example.com/assets/';
$base-url: '/assets/' !default;
